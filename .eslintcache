[{"C:\\Users\\Zongrong.Huang.IFT\\Desktop\\React_camp\\realtime-weather-app\\src\\index.js":"1","C:\\Users\\Zongrong.Huang.IFT\\Desktop\\React_camp\\realtime-weather-app\\src\\reportWebVitals.js":"2","C:\\Users\\Zongrong.Huang.IFT\\Desktop\\React_camp\\realtime-weather-app\\src\\App.js":"3","C:\\Users\\Zongrong.Huang.IFT\\Desktop\\React_camp\\realtime-weather-app\\src\\components\\WeatherIcon.js":"4"},{"size":523,"mtime":1611645547266,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":7369,"mtime":1611825253772,"results":"8","hashOfConfig":"6"},{"size":2867,"mtime":1611825872422,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1f1v254",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Zongrong.Huang.IFT\\Desktop\\React_camp\\realtime-weather-app\\src\\index.js",[],["20","21"],"C:\\Users\\Zongrong.Huang.IFT\\Desktop\\React_camp\\realtime-weather-app\\src\\reportWebVitals.js",[],"C:\\Users\\Zongrong.Huang.IFT\\Desktop\\React_camp\\realtime-weather-app\\src\\App.js",["22"],"import styled from '@emotion/styled'\r\nimport { ThemeProvider } from '@emotion/react'\r\nimport { useState, useEffect, useCallback } from 'react'\r\nimport dayjs from 'dayjs'\r\n\r\n\r\nimport { ReactComponent as AirFlowIcon } from './images/airFlow.svg'\r\nimport { ReactComponent as RainIcon } from './images/rain.svg'\r\nimport { ReactComponent as RefreshIcon } from './images/refresh.svg'\r\nimport { ReactComponent as LoadingIcon } from './images/loading.svg'\r\n\r\nimport WeatherIcon from './components/WeatherIcon.js'\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.backgroundColor};\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center; \r\n`\r\n\r\nconst WeatherCard = styled.div`\r\n  position: relative;\r\n  min-width: 360px;\r\n  box-shadow: ${({ theme }) => theme.boxShadow};\r\n  background-color: ${({ theme }) => theme.foregroundColor};\r\n  box-sizing: border-box;\r\n  padding: 30px 15px;\r\n`\r\n\r\nconst Location = styled.div`\r\n  ${(props) => console.log(props)}\r\n  font-size: 28px;\r\n  color: ${({ theme }) => theme.titleColor}\r\n  margin-bottom: 20px;\r\n`\r\n\r\nconst Description = styled.div`\r\n  font-size: 16px;\r\n  color: ${({ theme }) => theme.textColor};\r\n  margin-bottom: 30px;\r\n`\r\n\r\nconst CurrentWeather = styled.div`\r\ndisplay: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n`\r\n\r\nconst Temperature = styled.div`\r\ncolor: ${({ theme }) => theme.temperatureColor};\r\n  font-size: 96px;\r\n  font-weight: 300;\r\n  display: flex;\r\n`\r\nconst Celsius = styled.div`\r\nfont-weight: normal;\r\n  font-size: 42px;\r\n`\r\n\r\nconst AirFlow = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 16x;\r\n  font-weight: 300;\r\n  color: ${({ theme }) => theme.textColor};\r\n  margin-bottom: 20px;\r\n  svg {\r\n    width: 25px;\r\n    height: auto;\r\n    margin-right: 30px;\r\n  }\r\n`\r\n\r\nconst Rain = styled.div`\r\ndisplay: flex;\r\n  align-items: center;\r\n  font-size: 16x;\r\n  font-weight: 300;\r\n  color: ${({ theme }) => theme.textColor};\r\n  svg {\r\n    width: 25px;\r\n    height: auto;\r\n    margin-right: 30px;\r\n  }\r\n`\r\n\r\nconst Refresh = styled.div`\r\n position: absolute;\r\n  right: 15px;\r\n  bottom: 15px;\r\n  font-size: 12px;\r\n  display: inline-flex;\r\n  align-items: flex-end;\r\n  color: ${({ theme }) => theme.textColor};\r\n  svg {\r\n    margin-left: 10px;\r\n    width: 15px;\r\n    height: 15px;\r\n    cursor: pointer;\r\n    animation: rotate infinite 1.5s linear;\r\n    animation-duration: ${({ isLoading }) => (isLoading ? '1.5s' : '0s')}\r\n  }\r\n\r\n  @keyframes rotate{\r\n    from {\r\n      transform: rotate(360deg)\r\n    }\r\n    to {\r\n      transform: rotate(0deg)\r\n    }\r\n  }\r\n`\r\n\r\n\r\n\r\nconst theme = {\r\n  light: {\r\n    backgroundColor: '#ededed',\r\n    foregroundColor: '#f9f9f9',\r\n    boxShadow: '0 1px 3px 0 #999999',\r\n    titleColor: '#212121',\r\n    temperatureColor: '#757575',\r\n    textColor: '#828282',\r\n  },\r\n  dark: {\r\n    backgroundColor: '#1F2022',\r\n    foregroundColor: '#121416',\r\n    boxShadow:\r\n      '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\r\n    titleColor: '#f9f9fa',\r\n    temperatureColor: '#dddddd',\r\n    textColor: '#cccccc',\r\n  }\r\n}\r\n\r\nconst AUTHORIZATION_KEY = 'CWB-6F9A08E3-0806-4406-A992-F157B05FE585'\r\nconst LOCATION_NAME = '臺北'\r\nconst LOCATION_NAME_FORECAST = '臺北市'\r\n\r\nconst fetchCurrentWeather = () => {\r\n  return fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${AUTHORIZATION_KEY}&locationName=${LOCATION_NAME}`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      const locationData = data.records.location[0]\r\n      console.log('location data', locationData)\r\n\r\n      const weatherElements = locationData.weatherElement.reduce(\r\n        (neededElements, item) => {\r\n          if (['WDSD', 'TEMP'].includes(item.elementName)) {\r\n            neededElements[item.elementName] = item.elementValue\r\n          }\r\n          return neededElements\r\n        }, {}\r\n      )\r\n\r\n      console.log('weatherElements', weatherElements)\r\n\r\n      return {\r\n        observationTime: locationData.time.obsTime,\r\n        locationName: locationData.locationName,\r\n        temperature: weatherElements.TEMP,\r\n        windSpeed: weatherElements.WDSD,\r\n      }\r\n    })\r\n    .catch(error => console.log('error', error))\r\n}\r\n\r\nconst fetchWeatherForecast = () => {\r\n  return fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${AUTHORIZATION_KEY}&locationName=${LOCATION_NAME_FORECAST}`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      const locationData = data.records.location[0]\r\n\r\n      console.log('another set of location data', locationData)\r\n\r\n      const weatherElements = locationData.weatherElement.reduce((neededElements, item) => {\r\n        if (['Wx', 'PoP', 'CI'].includes(item.elementName)) {\r\n          neededElements[item.elementName] = item.time[0].parameter\r\n        }\r\n        return neededElements\r\n      }, {})\r\n\r\n\r\n      return {\r\n        description: weatherElements.Wx.parameterName,\r\n        weatherCode: weatherElements.Wx.parameterValue,\r\n        rainPossibility: weatherElements.PoP.parameterName,\r\n        comfortability: weatherElements.CI.parameterName,\r\n      };\r\n    })\r\n    .catch(error => console.log('error', error))\r\n}\r\n\r\n\r\nfunction App() {\r\n  const [currentTheme, setCurrentTheme] = useState('light')\r\n\r\n  const [weatherElement, setWeatherElement] = useState({\r\n    observationTime: new Date(),\r\n    locationName: '',\r\n    description: '',\r\n    windSpeed: 0,\r\n    temperature: 0,\r\n    rainPossibility: 0,\r\n    comfortability: '',\r\n    weatherCode: 0,\r\n    isLoading: true\r\n  })\r\n\r\n  const fetchData = useCallback(async () => {\r\n    setWeatherElement((prevState) => ({\r\n      ...prevState,\r\n      isLoading: true,\r\n    }));\r\n\r\n    const [currentWeather, weatherForecast] = await Promise.all([\r\n      fetchCurrentWeather(),\r\n      fetchWeatherForecast()\r\n    ])\r\n\r\n    setWeatherElement({\r\n      ...currentWeather,\r\n      ...weatherForecast,\r\n      isLoading: false\r\n    })\r\n  }, [])\r\n\r\n\r\n  useEffect(() => { fetchData() }, [fetchData])\r\n\r\n\r\n  const {\r\n    observationTime,\r\n    locationName,\r\n    description,\r\n    windSpeed,\r\n    temperature,\r\n    rainPossibility,\r\n    comfortability,\r\n    weatherCode,\r\n    isLoading\r\n  } = weatherElement\r\n\r\n  return (\r\n    <ThemeProvider theme={theme[currentTheme]}>\r\n      <Container>\r\n        <WeatherCard>\r\n          <Location>{locationName}</Location>\r\n          <Description>{description} {comfortability}</Description>\r\n          <CurrentWeather>\r\n            <Temperature>\r\n              {Math.round(temperature)} <Celsius>°C</Celsius>\r\n            </Temperature>\r\n            <WeatherIcon weatherCode={weatherCode} moment='night' />\r\n          </CurrentWeather>\r\n          <AirFlow>\r\n            <AirFlowIcon /> {windSpeed} m/h\r\n        </AirFlow>\r\n          <Rain>\r\n            <RainIcon />\r\n            {rainPossibility}%\r\n        </Rain>\r\n          <Refresh onClick={fetchData} isLoading={isLoading}> 最後觀測時間：\r\n            {new Intl.DateTimeFormat('zh-TW', {\r\n            hour: 'numeric',\r\n            minute: 'numeric'\r\n          })\r\n              .format(dayjs(observationTime))\r\n            }\r\n            {isLoading ? <LoadingIcon /> : <RefreshIcon />}\r\n          </Refresh>\r\n        </WeatherCard>\r\n      </Container>\r\n    </ThemeProvider >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Zongrong.Huang.IFT\\Desktop\\React_camp\\realtime-weather-app\\src\\components\\WeatherIcon.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":198,"column":24,"nodeType":"29","messageId":"30","endLine":198,"endColumn":39},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'setCurrentTheme' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]